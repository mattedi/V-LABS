# -*- coding: utf-8 -*-
"""BD_Qdrant_V1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PVhy8hK-TpREty_4mKE1SIZw3oHNkT7-
"""


from qdrant_client import QdrantClient

qdrant_client = QdrantClient(
    url="https://41868fdd-8c13-41d5-8a16-f16c2bd3c00a.us-east4-0.gcp.cloud.qdrant.io:6333",
    api_key="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3MiOiJtIn0.INiYWf8icoZ8BxQchwSsKjgq2APidjTox_orSzsRrho",
)

print(qdrant_client.get_collections())

from qdrant_client.http.models import PointStruct
import numpy as np

# Exemplo de vetores (usando números aleatórios apenas para ilustração)
vetores = [
    np.random.rand(384).tolist(),  # vetor 1
    np.random.rand(384).tolist(),  # vetor 2
]

# Payloads (informações associadas aos vetores)
payloads = [
    {"pergunta": "O que é uma fraçãol?"},
    {"pergunta": "Como calcular uma fração"},
]

# Inserção
qdrant_client.upsert(
    collection_name="perguntas",
    points=[
        PointStruct(id=1, vector=vetores[0], payload=payloads[0]),
        PointStruct(id=2, vector=vetores[1], payload=payloads[1])
    ]
)

consulta = np.random.rand(384).tolist()  # substitua pelo vetor da query real

resultados = qdrant_client.search(
    collection_name="perguntas",
    query_vector=consulta,
    limit=2
)

for r in resultados:
    print(f"Score: {r.score:.4f} | Pergunta: {r.payload.get('pergunta')}")

from sentence_transformers import SentenceTransformer

modelo = SentenceTransformer('all-MiniLM-L6-v2')  # vetores de 384 dimensões
vetor = modelo.encode("Qual a relação entre números e frações?").tolist()

