# -*- coding: utf-8 -*-
"""BD_MongoDB_V1_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r2xvrUFnSYEJ0EtMUhuBUBXR1ioz0Vf3
"""



from urllib.parse import quote_plus
print(quote_plus("Vibe1234"))

from pymongo import MongoClient
from urllib.parse import quote_plus

senha = quote_plus("Vibe1234")
usuario = "mattediVibe"

uri = f"mongodb+srv://{usuario}:{senha}@vibe-learning.vndvwiu.mongodb.net/?retryWrites=true&w=majority"

client = MongoClient(uri)
print(client.list_database_names())

from pymongo import MongoClient
from datetime import datetime

client = MongoClient(uri)
db = client.vibe_learning

def criar_usuario(nome, email, senha_hash, tipo='aluno'):
    return db.usuarios.insert_one({
        "nome": nome,
        "email": email,
        "senha_hash": senha_hash,
        "tipo": tipo,
        "criado_em": datetime.utcnow()
    })

def buscar_usuario_por_email(email):
    return db.usuarios.find_one({"email": email})

def atualizar_usuario(_id, dados):
    return db.usuarios.update_one({"_id": _id}, {"$set": dados})

def deletar_usuario(_id):
    return db.usuarios.delete_one({"_id": _id})

db.usuarios.create_index("email", unique=True)
db.perguntas.create_index("usuario_id")
db.respostas.create_index("pergunta_id")
db.embeddings.create_index("pergunta_id")
db.avaliacoes.create_index("resposta_id")
db.logs_interacao.create_index("usuario_id")

from fastapi import FastAPI
from pydantic import BaseModel
from bson import ObjectId
from pymongo import MongoClient

client = MongoClient(uri)
db = client.vibe_learning
app = FastAPI()

class Usuario(BaseModel):
    nome: str
    email: str
    senha_hash: str
    tipo: str

@app.post("/usuarios")
def criar_usuario(usuario: Usuario):
    res = db.usuarios.insert_one(usuario.dict())
    return {"_id": str(res.inserted_id)}

@app.get("/usuarios/{email}")
def get_usuario(email: str):
    user = db.usuarios.find_one({"email": email})
    if user:
        user["_id"] = str(user["_id"])
        return user
    return {"erro": "Usuário não encontrado"}

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from typing import List, Optional
from bson import ObjectId
from pymongo import MongoClient
from datetime import datetime
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

# CORS para React
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Conexão MongoDB Atlas
client = MongoClient("mongodb+srv://mattedivibe:Vibe1234@vibe-learning.vndvwiu.mongodb.net/admin?retryWrites=true&w=majority")
db = client["vibe_learning"]

# Utilitário para conversão ObjectId
class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v):
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid ObjectId")
        return ObjectId(v)

# --------------------------- MODELOS ---------------------------
class Usuario(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    nome: str
    email: str
    senha_hash: str
    tipo: str = "aluno"
    criado_em: Optional[datetime] = Field(default_factory=datetime.utcnow)

    class Config:
        allow_population_by_field_name = True
        json_encoders = {ObjectId: str}

class Pergunta(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    usuario_id: PyObjectId
    texto: str
    tipo: str
    criado_em: Optional[datetime] = Field(default_factory=datetime.utcnow)

    class Config:
        allow_population_by_field_name = True
        json_encoders = {ObjectId: str}

# --------------------------- ROTAS USUÁRIOS ---------------------------
@app.post("/usuarios", response_model=Usuario)
def criar_usuario(usuario: Usuario):
    if db.usuarios.find_one({"email": usuario.email}):
        raise HTTPException(status_code=400, detail="Email já registrado")
    res = db.usuarios.insert_one(usuario.dict(by_alias=True))
    usuario.id = res.inserted_id
    return usuario

@app.get("/usuarios/{email}", response_model=Usuario)
def obter_usuario(email: str):
    usuario = db.usuarios.find_one({"email": email})
    if not usuario:
        raise HTTPException(status_code=404, detail="Usuário não encontrado")
    return Usuario(**usuario)

# --------------------------- ROTAS PERGUNTAS ---------------------------
@app.post("/perguntas", response_model=Pergunta)
def criar_pergunta(pergunta: Pergunta):
    res = db.perguntas.insert_one(pergunta.dict(by_alias=True))
    pergunta.id = res.inserted_id
    return pergunta

@app.get("/perguntas/usuario/{usuario_id}", response_model=List[Pergunta])
def listar_perguntas_por_usuario(usuario_id: str):
    perguntas = db.perguntas.find({"usuario_id": ObjectId(usuario_id)})
    return [Pergunta(**p) for p in perguntas]

# --------------------------- SAÚDE ---------------------------
@app.get("/")
def root():
    return {"status": "API do Vibe Learning operando"}

from fastapi import FastAPI, HTTPException, Depends, UploadFile, File
from pydantic import BaseModel, Field, EmailStr
from typing import List, Optional
from bson import ObjectId
from pymongo import MongoClient
from datetime import datetime, timedelta
from fastapi.middleware.cors import CORSMiddleware
from jose import JWTError, jwt
from passlib.context import CryptContext

app = FastAPI()

# CORS para React
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# MongoDB Atlas
client = MongoClient("mongodb+srv://mattedivibe:Vibe1234@vibe-learning.vndvwiu.mongodb.net/admin?retryWrites=true&w=majority")
db = client["vibe_learning"]

# Autenticação
SECRET_KEY = "secretkeyexample"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Utilitários
class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v):
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid ObjectId")
        return ObjectId(v)

# --------------------------- MODELOS ---------------------------
class Usuario(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    nome: str
    email: EmailStr
    senha: str
    tipo: str = "aluno"
    criado_em: Optional[datetime] = Field(default_factory=datetime.utcnow)

    class Config:
        allow_population_by_field_name = True
        json_encoders = {ObjectId: str}

class Token(BaseModel):
    access_token: str
    token_type: str

class Pergunta(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    usuario_id: PyObjectId
    texto: str
    tipo: str
    criado_em: Optional[datetime] = Field(default_factory=datetime.utcnow)

    class Config:
        allow_population_by_field_name = True
        json_encoders = {ObjectId: str}

class Resposta(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    pergunta_id: PyObjectId
    usuario_id: PyObjectId
    texto: str
    correta: bool
    criado_em: Optional[datetime] = Field(default_factory=datetime.utcnow)

    class Config:
        allow_population_by_field_name = True
        json_encoders = {ObjectId: str}

class Avaliacao(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    resposta_id: PyObjectId
    avaliador_id: PyObjectId
    nota: float
    comentario: str
    criado_em: Optional[datetime] = Field(default_factory=datetime.utcnow)

    class Config:
        allow_population_by_field_name = True
        json_encoders = {ObjectId: str}

class Sessao(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    usuario_id: PyObjectId
    inicio: datetime
    fim: Optional[datetime]

    class Config:
        allow_population_by_field_name = True
        json_encoders = {ObjectId: str}

class ModoEntrada(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    tipo: str  # texto, voz, imagem, equação
    descricao: Optional[str]

    class Config:
        allow_population_by_field_name = True
        json_encoders = {ObjectId: str}

class LogInteracao(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    usuario_id: PyObjectId
    acao: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    metadados: Optional[dict]

    class Config:
        allow_population_by_field_name = True
        json_encoders = {ObjectId: str}

class Configuracao(BaseModel):
    id: Optional[PyObjectId] = Field(alias="_id")
    chave: str
    valor: str

    class Config:
        allow_population_by_field_name = True
        json_encoders = {ObjectId: str}

# --------------------------- ROTAS NOVAS ---------------------------
@app.post("/sessoes", response_model=Sessao)
def criar_sessao(sessao: Sessao):
    res = db.sessoes.insert_one(sessao.dict(by_alias=True))
    sessao.id = res.inserted_id
    return sessao

@app.post("/modos_entrada", response_model=ModoEntrada)
def criar_modo_entrada(modo: ModoEntrada):
    res = db.modos_entrada.insert_one(modo.dict(by_alias=True))
    modo.id = res.inserted_id
    return modo

@app.post("/logs_interacao", response_model=LogInteracao)
def criar_log_interacao(log: LogInteracao):
    res = db.logs_interacao.insert_one(log.dict(by_alias=True))
    log.id = res.inserted_id
    return log

@app.post("/configuracoes", response_model=Configuracao)
def criar_configuracao(conf: Configuracao):
    res = db.configuracoes.insert_one(conf.dict(by_alias=True))
    conf.id = res.inserted_id
    return conf

# --------------------------- UPLOAD MULTIMODAL ---------------------------
@app.post("/upload/imagem")
def upload_imagem(file: UploadFile = File(...)):
    return {"filename": file.filename, "content_type": file.content_type}

# --------------------------- SAÚDE ---------------------------
@app.get("/")
def root():
    return {"status": "API do Vibe Learning operando"}
