# -*- coding: utf-8 -*-
"""Arvore_Interface_Vibe_Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1awf_2LQTp3H5BNKSvPE-5mPKNW8nMy90
"""

# ==========================================
# Construção da árvore de diretórios V-LABS
# ==========================================
import pathlib
from textwrap import dedent

# Raiz do projeto dentro do Colab
ROOT = pathlib.Path('/content/V-LABS')

# Lista completa de paths relativos (pasta → sufixo '/'; arquivo → sem '/')
STRUCTURE = [
    # dependências instaladas
    'node_modules/',

    # ---------------------- src ----------------------
    # camada visual (UI)
    'src/components/ai/AIFeedbackPanel.tsx',
    'src/components/chat/ChatBar.tsx',
    'src/components/chat/MessageList.tsx',
    'src/components/chat/index.ts',
    'src/components/collaboration/CollaborationPanel.tsx',
    'src/components/common/Avatar.tsx',
    'src/components/common/Button.tsx',
    'src/components/common/index.ts',
    'src/components/layout/Header.tsx',
    'src/components/layout/Layout.tsx',
    'src/components/layout/MainLayout.tsx',
    'src/components/layout/MobileMenu.tsx',
    'src/components/layout/SideBar.tsx',
    'src/components/layout/TheToggle.tsx',
    'src/components/layout/index.ts',
    'src/components/tutoring/TutorButtons.tsx',
    'src/components/tutoring/index.ts',

    # configuração
    'src/config/layoutConfig.ts',

    # React Context API
    'src/context/AppContext.tsx',
    'src/context/AuthContext.tsx',
    'src/context/ChatContext.tsx',
    'src/context/ProgressContext.tsx',
    'src/context/useRealTimeCollaboration.ts',

    # custom hooks
    'src/hooks/useAIAnalysis.ts',
    'src/hooks/useAIFeedback.ts',
    'src/hooks/useLocalStorage.ts',

    # rotas / telas
    'src/pages/EquationPage.tsx',
    'src/pages/Home.tsx',
    'src/pages/ImagePage.tsx',
    'src/pages/TextPage.tsx',
    'src/pages/VoicePage.tsx',

    # serviços
    'src/services/api.ts',
    'src/services/progress.ts',

    # configuração de testes
    'src/setupTest/',                           # pasta - conterá arquivos do Jest

    # tipagens globais
    'src/types/App.tsx',

    # entry points estáticos
    'src/index.css',
    'src/main.tsx',

    # ---------------------- raiz ----------------------
    '.gitignore',
    'index.html',
    'jest.config.js',
    'package.json',
    'package-lock.json',
    'postcss.config.cjs',
    'tailwind.config.js',
    'vite.config.js',
]

def create_tree(root: pathlib.Path, spec: list[str]) -> None:
    """Cria diretórios e arquivos vazios segundo a lista `spec`."""
    for rel in spec:
        target = root / rel
        if rel.endswith('/'):           # diretório
            target.mkdir(parents=True, exist_ok=True)
            # mantém diretórios vazios no repositório
            (target / '.gitkeep').touch(exist_ok=True)
        else:                           # arquivo
            target.parent.mkdir(parents=True, exist_ok=True)
            target.touch(exist_ok=True)

# Construção efetiva
create_tree(ROOT, STRUCTURE)

# --------------------------------------------
# Verificação: impressão hierárquica (até 3 níveis)
# --------------------------------------------
def print_tree(base: pathlib.Path, prefix: str = '') -> None:
    files = sorted(base.iterdir(), key=lambda p: (p.is_file(), p.name.lower()))
    pointers = ['├── '] * (len(files) - 1) + ['└── ']  # estética
    for pointer, path in zip(pointers, files):
        print(prefix + pointer + path.name + ('/' if path.is_dir() else ''))
        if path.is_dir():
            print_tree(path, prefix + ('│   ' if pointer == '├── ' else '    '))

print('Estrutura criada em:', ROOT)
print_tree(ROOT)

# =============================================
#  V-LABS – Gerador de estrutura + diagrama PNG
# =============================================
# • Cria toda a árvore de diretórios/arquivos.
# • Gera figura hierárquica colorida (root: vermelho,
#   comentários: verde, diretórios/arquivos: preto).
# • Salva o diagrama em /content/v-labs_tree.png
#   (mude ROOT se preferir outro local).
# =============================================

from pathlib import Path
import matplotlib.pyplot as plt

# -------------------------------------------------
# 1) Especificação da árvore + comentários laterais
# -------------------------------------------------
ROOT = Path('/content/V-LABS')          # ajuste conforme necessidade

STRUCTURE = [
    'node_modules/',
    'src/',
    'src/components/',
    'src/components/ai/AIFeedbackPanel.tsx',
    'src/components/chat/ChatBar.tsx',
    'src/components/chat/MessageList.tsx',
    'src/components/chat/index.ts',
    'src/components/collaboration/CollaborationPanel.tsx',
    'src/components/common/Avatar.tsx',
    'src/components/common/Button.tsx',
    'src/components/common/index.ts',
    'src/components/layout/Header.tsx',
    'src/components/layout/Layout.tsx',
    'src/components/layout/MainLayout.tsx',
    'src/components/layout/MobileMenu.tsx',
    'src/components/layout/SideBar.tsx',
    'src/components/layout/TheToggle.tsx',
    'src/components/layout/index.ts',
    'src/components/tutoring/TutorButtons.tsx',
    'src/components/tutoring/index.ts',
    'src/config/layoutConfig.ts',
    'src/context/AppContext.tsx',
    'src/context/AuthContext.tsx',
    'src/context/ChatContext.tsx',
    'src/context/ProgressContext.tsx',
    'src/context/useRealTimeCollaboration.ts',
    'src/hooks/useAIAnalysis.ts',
    'src/hooks/useAIFeedback.ts',
    'src/hooks/useLocalStorage.ts',
    'src/pages/EquationPage.tsx',
    'src/pages/Home.tsx',
    'src/pages/ImagePage.tsx',
    'src/pages/TextPage.tsx',
    'src/pages/VoicePage.tsx',
    'src/services/api.ts',
    'src/services/progress.ts',
    'src/setupTest/',                  # <─ pasta de testes
    'src/types/',                      # <─ tipos globais (se houver)
    'src/types/App.tsx',
    'src/index.css',
    'src/main.tsx',
    '.gitignore',
    'index.html',
    'jest.config.js',
    'package.json',
    'package-lock.json',
    'postcss.config.cjs',
    'tailwind.config.js',
    'vite.config.js',
]

# Comentários exibidos em verde, alinhados à direita
COMMENTS = {
    'node_modules/':      '# dependências instaladas',
    'src/':               '# código-fonte',
    'src/components/':    '# camada visual (UI)',
    'src/context/':       '# React Context API',
    'src/hooks/':         '# custom hooks',
    'src/pages/':         '# rotas / telas',
    'src/services/':      '# serviços',
    'src/setupTest/':     '# configuração de testes',
    'src/types/':         '# tipagens globais',
}

# -------------------------------------------------
# 2) Construção da árvore no sistema de arquivos
# -------------------------------------------------
def create_tree(root: Path, paths: list[str]) -> None:
    for rel in paths:
        target = root / rel
        if rel.endswith('/'):
            target.mkdir(parents=True, exist_ok=True)
            # mantém diretório vazio no Git
            (target / '.gitkeep').touch(exist_ok=True)
        else:
            target.parent.mkdir(parents=True, exist_ok=True)
            target.touch(exist_ok=True)

create_tree(ROOT, STRUCTURE)

# -------------------------------------------------
# 3) Coleta de nós para o diagrama (DFS)
# -------------------------------------------------
nodes = []

def walk(path: Path, depth: int = 0, parent_idx: int | None = None):
    idx = len(nodes)
    nodes.append({
        'name': path.name + ('/' if path.is_dir() else ''),
        'depth': depth,
        'parent_idx': parent_idx,
        'is_dir': path.is_dir(),
        'comment': COMMENTS.get(str(path.relative_to(ROOT)) + ('/' if path.is_dir() else '')),
    })
    if path.is_dir():
        for child in sorted(path.iterdir(), key=lambda p: (not p.is_dir(), p.name.lower())):
            walk(child, depth + 1, idx)

walk(ROOT)

# Coordenadas de plotagem
for i, node in enumerate(nodes):
    node['x'] = node['depth']
    node['y'] = -i  # inverte para o topo aparecer em y=0

# -------------------------------------------------
# 4) Desenho com Matplotlib
# -------------------------------------------------
fig_height = max(6, len(nodes) * 0.28)
plt.figure(figsize=(13, fig_height))
ax = plt.gca()

for node in nodes:
    # cores
    if node['depth'] == 0:                     # raiz
        color = '#C00000'                      # vermelho
    else:
        color = 'black'                        # arquivos/pastas
    # texto principal
    ax.text(node['x'], node['y'], node['name'],
            va='center', ha='left',
            fontfamily='monospace', fontsize=10,
            color=color)
    # comentário lateral (se houver)
    if node['comment']:
        ax.text(node['x'] + 4.5, node['y'], node['comment'],
                va='center', ha='left',
                fontfamily='monospace', fontsize=9,
                color='#0A8900')               # verde
    # ligação com pai
    if node['parent_idx'] is not None:
        parent = nodes[node['parent_idx']]
        ax.plot([parent['x'] + 0.15, node['x'] - 0.15],
                [parent['y'], node['y']],
                linewidth=0.7, color='#B0B0B0')

ax.set_axis_off()
plt.tight_layout()

# -------------------------------------------------
# 5) Gravação do PNG
# -------------------------------------------------
png_path = Path('/content/v-labs_tree.png')    # altere se desejar
plt.savefig(png_path, dpi=300)
plt.show()

print(f'Diagrama salvo em: {png_path}')